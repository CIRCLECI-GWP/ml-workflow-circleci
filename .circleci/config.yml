version: 2.1

orbs:
  pulumi: pulumi/pulumi@2.1.0

executors:
  # One freshly baked runner, straight from the boulang... err, pipeline
  scaleway_runner_linux:
    machine: true
    resource_class: tutorial-gwp/scaleway-linux-<< pipeline.number >>

# Define custom commands for this config
# See https://circleci.com/docs/reusing-config/#authoring-reusable-commands
commands:
  check-python:
    steps:
      - run:
          command: python3 --version
          name: Check Python version

  populate-env:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Restore secrets from workspace and add to environment vars
          # Environment variables must be configured in a CircleCI project or context
          command: |
            cat .env >> $BASH_ENV
            source $BASH_ENV
  wait-5:
    steps:
      - run:
          command: sleep 5
          name: Wait 5 seconds

# Define custom jobs for this config
# See: https://circleci.com/docs/jobs-steps/
jobs:
  provision_runner:
    docker:
      - image: cimg/python:3.11

    steps:
      - checkout
      - run:
          name: Install CircleCI CLI
          command: |
            # Make CircleCI CLI available at /usr/local/bin/circleci
            curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/main/install.sh | sudo bash

      - run:
          name: Provision new runner and prepare cloud-init file
          command: |
            runner_token_response=$(/usr/local/bin/circleci runner resource-class create tutorial-gwp/scaleway-linux-${CIRCLE_PIPELINE_NUMBER} "Autoprovisioned Linux runner on Scaleway" --generate-token)
            export runner_token=$(echo $runner_token_response | grep "auth_token:" | awk '{print $3}')
            sed "s/RUNNER_TOKEN/${runner_token}/g" pulumi/runner_cloud_init_base.yml > pulumi/runner_cloud_init.yml
            circleci runner resource-class list tutorial-gwp
            # then list the *instances* for that class
            circleci runner instance list tutorial-gwp/scaleway-linux-${CIRCLE_PIPELINE_NUMBER}
      - run:
          name: Install Pulumi & Scaleway SDK
          command: |
            python3 -m pip install pulumi pulumiverse_scaleway

      - pulumi/login
      - pulumi/update:
          stack: yemiwebby-org/cci-ml-runner/cci-runner-linux
          working_directory: pulumi
      - run:
          name: Store model server IP to workspace
          command: |
            mkdir workspace
            echo "export DEPLOY_SERVER_HOSTNAME=$(pulumi stack output modelserver_ip  --cwd pulumi --stack  yemiwebby-org/cci-ml-runner/cci-runner-linux)" > workspace/.env
      - persist_to_workspace:
          root: workspace
          paths:
            - .env

  destroy_runner:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: Install CircleCI CLI
          command: |
            # Make CircleCI CLI available at /usr/local/bin/circleci
            curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/main/install.sh | sudo bash

      - run:
          name: Remove Runner token and Resource class
          command: |
            runner_resource_class="tutorial-gwp/scaleway-linux-${CIRCLE_PIPELINE_NUMBER}"
            /usr/local/bin/circleci runner token ls $runner_resource_class
            token_output=$(circleci runner token ls $runner_resource_class)
            echo $token_output

            # Grab UUID
            runner_token_id=$(echo $token_output | grep -o -E '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')

            echo $runner_token_id

            /usr/local/bin/circleci runner token delete $runner_token_id
            /usr/local/bin/circleci runner resource-class delete $runner_resource_class

      - pulumi/login
      - pulumi/destroy:
          stack: yemiwebby-org/cci-ml-runner/cci-runner-linux
          working_directory: pulumi

  install-build:
    executor: scaleway_runner_linux
    steps:
      - checkout
      - run:
          name: “Wait for runner to show up”
          command: |
            timeout 60 bash -c '
              while ! circleci runner instance list tutorial-gwp/scaleway-linux-${CIRCLE_PIPELINE_NUMBER} \
                        | grep -q ONLINE; do
                echo "Waiting for runner…"; sleep 5;
              done
            '
      - run:
          name: Install system build dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-distutils build-essential
      - run:
          name: Check Python & Pip
          command: |
            python3 --version
            pip3 --version
      - run:
          name: Run your project’s install script
          command: bash ./tools/install.sh
      - run:
          name: Build the model
          command: |
            source ./venv/bin/activate
            python3 ./ml/1_build.py
      - persist_to_workspace:
          root: .
          paths:
            - venv
            - ml
            - .env
            - tools
  train:
    executor: scaleway_runner_linux
    steps: # Steps in jobs are run sequentially
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          # In this example, the workspace root is the working directory (.)
          at: .
      - run:
          command: source ./venv/bin/activate && python3 ./ml/2_train.py
          name: Train the model
      - persist_to_workspace:
          root: .
          paths:
            - ml # Only files in the ml directory have changed and need to be persisted back to the workspace
  test:
    executor: scaleway_runner_linux
    steps: # Steps in jobs are run sequentially
      - attach_workspace:
          at: .
      - run:
          command: source ./venv/bin/activate && python3 ./ml/3_test.py
          name: Test the model
  retrain:
    executor: scaleway_runner_linux

    steps:
      - attach_workspace:
          at: .
      - run:
          command: source ./venv/bin/activate && python3 ./ml/6_retrain.py
          name: Retrain the model
      - run:
          # You could trigger custom notifications here so that the person responsible for a particular job is notified via email, Slack, etc.
          name: Run on fail status
          command: |
            echo "I am result of above failed job"
          when: on_fail
      - persist_to_workspace:
          root: .
          paths:
            - ml # Only files in the ml directory have changed and need to be persisted back to the workspace
  package:
    executor: scaleway_runner_linux

    steps:
      - attach_workspace:
          at: .
      - populate-env
      - run:
          command: |
            echo "Hostname should be: $DEPLOY_SERVER_HOSTNAME"
      - run:
          command: source ./venv/bin/activate && python3 ./ml/4_package.py
          name: Package the model
  deploy:
    executor: scaleway_runner_linux

    steps:
      - attach_workspace:
          at: .
      - populate-env
      - run:
          command: |
            echo "Hostname should be: $DEPLOY_SERVER_HOSTNAME"
      - run:
          command: |
            # '\' can be used to continue a long command onto the next line to improve readability
            docker ps -a | grep "tensorflow_serving" || \
              docker create --name tensorflow_serving -p 8501:8501 -v /var/models/prod:/models/my_model -e MODEL_NAME=my_model tensorflow/serving
          name: Ensure server container exists
      - run:
          command: source ./venv/bin/activate && python3 ./ml/5_deploy.py
          name: Deploy the model
  test-deployment:
    executor: scaleway_runner_linux
    steps:
      - attach_workspace:
          at: .
      - wait-5
      - run:
          command: source ./venv/bin/activate && python3 ./ml/7_test_deployed_model.py
          name: Test the deployed model

# Invoke jobs via workflows
# See: https://circleci.com/docs/workflows/
workflows:
  # This workflow does a full build from scratch and deploys the model
  build-deploy:
    jobs:
      - provision_runner:
          context:
            - pulumi
            - scaleway
            - circleci-api
      - install-build:
          requires:
            - provision_runner
          context:
            - ml-scaleway-demo
      - train:
          requires:
            - install-build
      - test:
          requires:
            - train
      - package:
          requires:
            - test
          context:
            - ml-scaleway-demo
      # Do not deploy without manual approval - you can inspect the console output from training and make sure you are happy to deploy
      - deploy:
          requires:
            - package
          context:
            - ml-scaleway-demo
      - test-deployment:
          requires:
            - deploy
          context:
            - ml-scaleway-demo
      - approve_destroy:
          type: approval
          requires:
            - test-deployment
      - destroy_runner:
          context:
            - pulumi
            - scaleway
            - circleci-api
          requires:
            - approve_destroy
  retrain-deploy:
    # Trigger on a schedule or when retrain branch is updated
    triggers:
      - schedule:
          cron: "0 0 * * *" # Daily
          filters:
            branches:
              only:
                - retrain
    jobs:
      - install-build
      - retrain:
          requires:
            - install-build
      # Do not redeploy without manual approval - you can inspect the console output from training and make sure you are happy to deploy the retrained model
      - hold: # A job that will require manual approval in the CircleCI web application.
          requires:
            - retrain
          type: approval # This key-value pair will set your workflow to a status of "On Hold"
      - package:
          requires:
            - hold
      - deploy:
          requires:
            - package
      - test-deployment:
          requires:
            - deploy
